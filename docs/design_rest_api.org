* REST Endpoints

The Pushy REST API allows you to create jobs and retrieve status. 

All requests will be signed using the Chef API signing protocol and a
Chef client key.

** /\_status

*** GET

Gets current server status.

Response:

#+begin_example
{
  "status": "it's alive"
}
#+end_example

Error Codes:

+ 200 :: OK

** /organizations/ORGNAME/pushy/jobs

*** POST

Starts a new job.

POST body:

#+begin_example
{
  "command": "chef-client",
  "run_timeout": 300,
  "nodes": ["NODE1", "NODE2", "NODE3", "NODE4", "NODE5", "NODE6"]
}
#+end_example

Response:

#+begin_example
{
  "id": "aaaaaaaaaaaa25fd67fa8715fd547d3d"
}
#+end_example

Error Codes:

+ 201 :: Job created.
+ 400 :: Bad signature headers or bad JSON body
+ 401 :: Unknown or non-authenticated user
+ 403 :: User not authorized to create jobs
+ 404 :: Organization does not exist

*** GET

Gets a list of all jobs ever run in the system. TODO perhaps this is not such a
good idea, eh.  This needs more design, both input and output.

#+begin_example
[
  "aaaaaaaaaaaa25fd67fa8715fd547d3d",
  "aaaaaaaaaaaa6af7b14dd8a025777cf0"
]
#+end_example

Error Codes:

+ 200 :: Success
+ 400 :: Bad signature headers or bad JSON body
+ 401 :: Unknown or non-authenticated user
+ 403 :: User not authorized to read jobs
+ 404 :: Organization does not exist

** /organizations/ORGNAME/pushy/jobs/<id>

*** GET

    Gets the status of an individual job. This may include aggregated
    breakdown of node state, (n nodes completed, m nodes failed, etc)
    TODO: restrict command.

Response:

The response includes the current status of the job, as well as every
node in the job, organized by its status.

#+begin_example
{
  "id": "aaaaaaaaaaaa25fd67fa8715fd547d3d",
  "command": "chef-client",
  "run_timeout": 300,
  "status": "running",
  "created_at": "Tue, 04 Sep 2012 23:01:02 GMT",
  "updated_at": "Tue, 04 Sep 2012 23:17:56 GMT",
  "nodes": {
    "running": ["NODE1", "NODE5"],
    "succeeded": ["NODE2", "NODE3", "NODE4"],
    "failed": ["NODE6"],
    "crashed": ["NODE7"]
  }
}
#+end_example

"updated_at":

updated_at represents when the job entered its present state (voting, running,
complete, etc.). updated_at is *not* updated when node statuses update.

Job Statuses ("status"):

The job status represents the progress of the overall job.  complete,
quorum_failed, timed_out and aborted are terminal states: job and node states
will not change after that.

- voting        :: Waiting for nodes to commit or refuse to run the command.
- running       :: Running the command on the nodes.
- complete      :: Ran the command.  Check individual node statuses to see
                   if they completed or had issues.
- quorum_failed :: Did not run the command on any nodes.
- timed_out     :: Timed out while running the job.
- aborted       :: Job aborted by user.

Node Statuses ("nodes"):

These statuses represent the progress of a node running a job.  All states
except new, ready and running are *terminal states*--the node's state will not
change after that.

+ new         :: Node has neither committed nor refused to run the command.
+ ready       :: Node has committed to run the command but has not yet run it.
+ running     :: Node is presently running the command.
+ succeeded   :: Node successfully ran the command (an exit code of 0 was returned).
+ failed      :: Node failed to run the command (an exit code of nonzero was returned).
+ aborted     :: Node ran the command but stopped before completion.
+ crashed     :: Node went down after it started running
+ nacked      :: Node was busy when asked to be part of the job.
+ unavailable :: Node went down before it started running

Error Codes:

+ 200 :: OK
+ 400 :: Bad signature headers
+ 401 :: Unknown or non-authenticated user
+ 403 :: User not authorized to read jobs
+ 404 :: Organization or job does not exist

** /organizations/ORGNAME/pushy/jobs/<id>/abort

*** PUT
    Aborts the job. PUT is chosen for idempotency.

    TODO: response code spec.


** /organizations/ORGNAME/pushy/node_states

*** GET

Gets a list of all nodes and their up/down status.  TODO make this compacter?
Add job node is committed to?  If we add that, we need to ensure that updated_at
reflects it, or make it clear in the docs that updated_at only reflects status.

#+begin_example
[
  {
    "node_name": "FARQUAD",
    "status": "down",
    "updated_at": "Tue, 04 Sep 2012 23:17:56 GMT"
  },
  {
    "node_name": "DONKEY",
    "status": "down",
    "updated_at": "Tue, 04 Sep 2012 23:17:56 GMT"
  },
  {
    "node_name": "FIONA",
    "status": "down",
    "updated_at": "Tue, 04 Sep 2012 23:17:56 GMT"
  }
]

#+end_example

Error Codes:

+ 200 :: OK
+ 400 :: Bad signature headers or bad JSON body
+ 401 :: Unknown or non-authenticated user
+ 403 :: User not authorized to read jobs
+ 404 :: Organization does not exist

** /organizations/ORGNAME/pushy/node_states/<node_name>

*** GET

Gets an individual node's up/down status.  updated_at indicates
when the node's status changed.

#+begin_example
  {
    "node_name": "FIONA",
    "status": "down",
    "updated_at": "Tue, 04 Sep 2012 23:17:56 GMT"
  }
#+end_example

Error Codes:

+ 200 :: OK
+ 400 :: Bad signature headers or bad JSON body
+ 401 :: Unknown or non-authenticated user
+ 403 :: User not authorized to read jobs
+ 404 :: Organization or node does not exist

** /organizations/ORGNAME/pushy/connect/NODENAME

*** GET

Nodes use this to get the information necessary to connect to the server.

MAA: Why not config instead of connect; it's more than simply information required to connect.

#+begin_src javascript
    {
      "host": "opc1.opscode.com",
      "push_jobs": {
         "heartbeat": {
            "out_addr": "tcp://10.10.1.5:10000",
            "interval": 15,
            "offline_threshold": 3,
            "online_threshold": 2
         },
         "command_addr": "tcp://10.10.1.5:10001", 
       },
       "public_key": "-----BEGIN PUBLIC KEY-----
            MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvnf8osLhltEPZzgrdZjk
            2xdGKDRaF/DxRE/Tdj2T2q0+MwXeK1XHeZJZkuvWHQ7Lpf4KdlYdMjk6mjF5KGmJ
            a3omes8emyu7yfGs4tvn+5BKhaHPHCRA0vskE9/uIt9J/RgZIE0A3dBtf+9chY7J
            qJujIE9f3uJCknBf5jDeI3krYXzKL6mI9q2RO0xq10Omk/zpYIM4a20AMYxSmryM
            R3ivdiviW2hDZMdEHx0Au3+e4wkh1uiXC2ayh/hwObnFqPz5uwNAkzB8Z9qKl0G6
            Ju7lEl3oJFqu0XtNuYgYmU8c/W9F3aNMnsQiTKEaUNmasfO/dIHSJmJpGccZFjwp
            vQIDAQAB
            -----END PUBLIC KEY-----",
       "lifetime":3600
    }
#+end_src

    + type :: message type
    + host :: sender's host name (Private Chef server)
    + push\_jobs/heartbeat/out_addr :: URL pointing to the server's heartbeat broadcast service
    + push\_jobs/heartbeat/interval :: Interval, in seconds, between heartbeat messages
    + push\_jobs/heartbeat/offline_threshold :: How many intervals must be missed before the other end is considered offline
    + push\_jobs/heartbeat/online_threshold :: How many intervals must be missed before the other end is considered online
    + push\_jobs/command/command_addr :: URL for command channel (TODO: Presently this is in
         the heartbeat clause, and should be changed.)
    + public\_key :: The signing key that the push server will use.
    + lifetime :: how long in seconds this configuration is good for. The node should reload the
                  configuration information after this has expired.

Error Codes:

+ 200 :: OK
+ 400 :: Bad signature headers or bad JSON body
+ 401 :: Unknown or non-authenticated user
+ 403 :: User not authorized to create connections to this client (only the actual client can do this)
+ 404 :: Organization or node does not exist
